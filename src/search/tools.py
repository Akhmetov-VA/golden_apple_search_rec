import numpy as np
import pandas as pd
import requests
import streamlit as st
from PIL import Image
from os import listdir


API_HOST = "api"
API_PORT = 8080


def show_theory_block():
    st.markdown(
        """
#### Актуальность тематики

Современный мир характеризуется использованием новых информационных технологий во всех 
сферах жизнедеятельности человека. Информация становится определяющим фактором развития общества. 
Все информационное пространство, в котором человек существует, все больше углубляется в Internet. 
С появлением глобальной информационной компьютерной сети появилась возможность оперативно получать 
информацию из любой точки земного шара. Самым распространенным средством информационных компьютерных 
технологий являются поисковые системы. Первые поисковые системы появились в сети Интернет более 
двадцати лет назад. В то время они реализовывали лишь функцию – поиска ссылок к недавно созданным 
страницам. На начальном этапе появления интернета, число пользователей сети было ограниченным, а 
количество информации относительно небольшим. Сегодня же поисковые системы превратились в 
многофункциональный сервис со своими службами. Они позволяют пользователям искать в сети Интернет 
самую разнообразную информацию, благодаря чему пользуются колоссальным спросом.

Таким образом, актуальность проблемы обусловливается противоречием между большими потоками информации, 
циркулирующими в современном мире и неумением быстрого и качественного ее поиска в сети Интернет.

#### Кому будет полезен этот кейс?

- Аналитикам данных
- Бизнес-информатикам
- Бизнес-аналитикам
- Маркетологам
- Руководителя по цифровой трансформации (CDO – Chief Digital Officer)
- Научным сотрудникам

#### А если у меня другой профиль?

Во-первых, всегда полезно знать о современных технологиях, которые применяют в своей работе
лидеры рынков.

Во-вторых, в ходе выполнения работы вы сможете изучить и понять этапы разработки поисковых
систем и применить их в своём профиле.

#### Цели и задачи

**Цель данной лабораторной работы** - ознакомить студентов с практикой применения искусственного интеллекта 
для поисковых систем.

**Задачи**:

1) Ознакомиться с теоретическими аспектами применения машинного обучения в поисковых системах;
2) Попробовать на практике одну из поисковых систем, реализованную методами машинного обучения.

#### Блок 1: Теория поисковых систем

Поиск информации - задача, которую человечество решает уже многие столетия. По мере роста объема 
информации, потенциально доступных одному человеку (например, посетителю библиотеки), создавались 
более совершенные поисковые средства и приемы, позволяющие найти необходимый документ. Одним из 
таких средств является информационно-поисковая система.

Поисковая система - система, обеспечивающая поиск и отбор необходимых данных 
в специальной базе с описаниями источников информации (индексе) на основе информационно-поискового 
языка и соответствующих правил поиска.

Главной задачей любой информационно-поисковой системы является поиск информации соответствующей 
информационным потребностям пользователя. Очень важно в результате проведенного поиска ничего не 
потерять, то есть найти все документы, относящиеся к запросу (полнота поиска), и не найти ничего 
лишнего (точность поиска). Поэтому устанавливается качественная характеристика процедуры поиска - релевантность.

Релевантность - соответствие результатов поиска сформулированному запросу.
"""
    )

    st.image(
        image="data/web_images/rel.png",
        caption="Пример релевантной поисковой выдачи"
    )

    st.markdown(
        """
Ембеддинги слов — это тип векторного представления слов, который фиксирует семантическое и 
синтаксическое сходство между словами. Они обычно рассчитываются для больших объемов 
текста и используются в различных задачах обработки естественного языка (NLP), таких как анализ 
настроений, классификация документов и машинный перевод. Они также используются в поисковых
системах для повышения точности и релевантности поиска. Ембеддинги слов создаются путем сопоставления 
слов с векторным пространством фиксированных размеров, так что слова со схожим значением или контекстом 
сопоставляются с точками, расположенными близко друг к другу в векторном пространстве. Это позволяет 
моделям машинного обучения лучше понимать значение слов и точно интерпретировать семантику естественного языка.
"""
    )
    st.image(
        image="data/web_images/embedding_example.png",
        caption="Пример эмбеддинга"
    )

    st.markdown(
        """
Например, их можно использовать для создания ембдеддингов целых документов, представляющих его содержимое, 
что позволяет получать более точные и релевантные результаты поиска. Ембеддинги также можно использовать 
для представления конкретных слов или фраз, что позволяет повысить эффективность 
поисковых запросов и улучшить результаты. Кроме того, ембеддинги можно использовать для 
представления отношений между документами, что позволяет получать более сложные результаты поиска.
"""
    )

    st.image(
        image="data/web_images/embedding_properties.png",
        caption="Визуализация семантических связей в ембеддингах"
    )

    st.write(
        """
---
Блок 2: Пример работы поисковой системы в интернет магазине
"""
    )


def show_rec_example():
    all_products = get_products_data()
    random_product_description = get_random_product_description()

    if 'text' not in st.session_state:
        st.session_state.text = ""

    def update():
        st.session_state.text = st.session_state.text_value

    with st.form(key='my_form', clear_on_submit=True):
        st.text_input(
            label=f"Введите описание продукта. Например: '{random_product_description}'",
            key='text_value',
            value=st.session_state.text
        )
        find = st.form_submit_button("Найти", on_click=update)

    if find:
        # блок рекомендаций по описанию
        st.subheader("Поисковая выдача")
        indexes = requests.post(
            url=f"http://{API_HOST}:{API_PORT}/get_search",
            params={"user_text_input": st.session_state.text}
        ).json()["indexes"]

        # создаем 4 колонки по 2 товара из рекомендаций
        # в первую колонку попадают ближайшие эмбеддинги с нечетными индексами
        # во вторую колонку попадают ближайшие эмбеддинги с четными индексами
        for col, index_1 in zip(st.columns(4), range(1, 5)):
            # первая колонка с рекомендацией
            same = all_products.loc[indexes[index_1]]
            image = get_image_by_sku(same.name)
            col.image(
                image,
                caption=f"{same['dimension17'] if not isinstance(same['dimension17'], float) else ''} {same['name']} - {same['price']} RUB"
            )
            col.write(f"""
        		##### {same['dimension17'].title() if not isinstance(same['dimension17'], float) else ''} {same['name']}
        		{same['description'].capitalize()}
        		"""[:200] + "..."
                      )
            col.markdown("---")
        # вторая колонка с рекомендацией

        for col, index_2 in zip(st.columns(4), range(5, 9)):
            same = all_products.loc[indexes[index_2]]
            image = get_image_by_sku(same.name)
            col.image(
                image,
                caption=f"{same['dimension17'] if not isinstance(same['dimension17'], float) else ''} {same['name']} - {same['price']} RUB"
            )
            col.write(f"""
        		##### {same['dimension17'].title() if not isinstance(same['dimension17'], float) else ''} {same['name']}
        		{same['description'].capitalize()}
        		"""[:200] + "..."
                      )


def show_quiz():
    total_answers = 0

    with st.form(key="quiz"):
        answer_1 = st.radio(
            label="Какая цель поисковых систем?",
            options=[
                "Выдать максимальное количество релевантных ответов",
                "Помочь пользователям быстро и легко находить релевантную информацию",
                "Сканировать сайты на предмет появления новой информации"
            ]
        )

        if answer_1 == "Помочь пользователям быстро и легко находить релевантную информацию":
            total_answers += 1

        answer_2 = st.radio(
            label="Каковы преимущества использования поисковой системы в интернет магазине?",
            options=[
                "Больше кликов пользователей",
                "Увеличивает время загрузки сайта",
                "Улучшает пользовательский опыт и повышает продажи",

            ]
        )

        if answer_2 == "Улучшает пользовательский опыт и повышает продажи":
            total_answers += 1

        answer_3 = st.radio(
            label="Что такое релевантность поисковой выдачи?",
            options=[
                "Соответствие результатов поиска сформулированному запросу",
                "Выдача нужного количества информации",
                "Евклидово расстояние между предыдущим и текущим запросом в поисковик"
            ]
        )

        if answer_3 == "Соответствие результатов поиска сформулированному запросу":
            total_answers += 1

        answer_4 = st.radio(
            label="Что такое эмбеддинг?",
            options=[
                "Числовая форма представления нечисловых данных",
                "Нечисловая форма представления числовых данных"
            ]
        )

        if answer_4 == "Числовая форма представления нечисловых данных":
            total_answers += 1

        answer_5 = st.radio(
            label="В каких задачах кроме поисковых систем еще применяются ембеддинги?",
            options=[
                "В математических",
                "В задачах Computer Vision",
                "В задачах обработки естественных языков"
            ]
        )

        if answer_5 == "В задачах обработки естественных языков":
            total_answers += 1

        answer_6 = st.radio(
            label="Как создаются простые эмбеддинги?",
            options=[
                "Путем сопоставления слов с числовыми векторами фиксированных размеров",
                "Методом шифрования данных",
                "Просто берутся из готовой библиотеки"
            ]
        )

        if answer_6 == "Путем сопоставления слов с числовыми векторами фиксированных размеров":
            total_answers += 1

        answer_7 = st.radio(
            label="Что такое полнота поиска?",
            options=[
                "Способность поисковика найти все документы, относящиеся к запросу",
                "Способность поисковика Выдать максимальное количество документов",
                "Объем поисковой выдачи в Кб"
            ]
        )

        if answer_7 == "Способность поисковика найти все документы, относящиеся к запросу":
            total_answers += 1

        check = st.form_submit_button("Проверить тест")

    if check:
        if total_answers < 5:
            st.warning(
                "Следует еще подучить теорию."
            )
        else:
            st.success(
                "Отлично! Вы хорошо усвоили теоретический блок."
            )

@st.experimental_memo
def get_products_data() -> pd.DataFrame:
    data = pd.read_csv("data/products.csv", index_col="sku")
    return data.drop(data[data["category"] == "sexual-wellness"].index)

@st.experimental_memo
def get_image_data() -> pd.DataFrame:
    image_data = pd.read_csv("data/product_images.csv", index_col="sku")
    image_data = image_data.groupby(image_data.index)["image"].apply(list)
    return image_data

def get_random_product_description() -> str:
    data = get_products_data()
    res = data.loc[np.random.choice(data.index)]
    product_desc = f"{res['dimension17']} {res['name']} {res['dimension18']}"
    return product_desc


def get_image_by_sku(sku: str or int) -> np.array:
    """
    Get image by product sku.

    :param: sku: product sku
    :return: image product if existed, else image with 'No image' text
    """
    image_data = get_image_data()
    try:
        for num, dir in enumerate(listdir("data/images")):
            try:
                image_name = image_data.loc[str(sku)][0]
                with Image.open(f"data/images/{dir}/{image_name}") as img:
                    res = np.array(img)
                return res
            except:
                if num == 2:
                    raise Exception
    except Exception as err:
        with Image.open("data/service_images/" + "no_img.jpg") as img:
            res = np.array(img)
        return res
